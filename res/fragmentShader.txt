#version 420 core

in vec3 localPosition;

out vec4 FragColor;

uniform mat4 projectionMatrix;
uniform mat4 viewMatrix;

uniform sampler3D density;

struct Ray {
    vec3 origin;
    vec3 dir;
};

struct AABB {
    vec3 min;
    vec3 max;
};

const int numSamples = 128;
const float stepSize = sqrt(2)/numSamples;

bool IntersectBox(Ray r, AABB aabb, out float t0, out float t1)
{
    vec3 invR = 1.0 / r.dir;
    vec3 tbot = invR * (aabb.min-r.origin);
    vec3 ttop = invR * (aabb.max-r.origin);
    vec3 tmin = min(ttop, tbot);
    vec3 tmax = max(ttop, tbot);
	
    vec2 t = max(tmin.xx, tmin.yz);
    t0 = max(t.x, t.y);
    t = min(tmax.xx, tmax.yz);
    t1 = min(t.x, t.y);
    return t0 <= t1; 
}

float reframeVal(float min, float max, float val)
{
	return (val - min) / (max - min);
}

void main()
{
	vec3 rayDirection = vec3(transpose(viewMatrix) * vec4(0,0,-1,0));

    Ray eye = Ray( localPosition, normalize(rayDirection) );
    AABB aabb = AABB(vec3(-1.0), vec3(+1.0));

    float tnear, tfar;
    IntersectBox(eye, aabb, tnear, tfar);

    vec3 rayStart = eye.origin + eye.dir * tnear;
    vec3 rayStop = eye.origin + eye.dir * tfar;
    rayStart = 0.5 * (rayStart + 1.0);
    rayStop = 0.5 * (rayStop + 1.0);

    vec3 pos = rayStart;
    vec3 step = normalize(rayStop-rayStart) * stepSize;
    float travel = distance(rayStop, rayStart);

	float maxDensity = 0.0f;
    for (int i=0; i < numSamples && travel > 0.0; ++i, pos += step, travel -= stepSize) {
		
		float densityVal = texture(density, pos).x;

		pos += step;
		travel -= stepSize;

        if (densityVal <= maxDensity)
			continue;
		//if(densityVal > 0.0f)
		//{
        //   maxDensity = densityVal;
		//   break;
		//}
		maxDensity = densityVal;
    }
	FragColor = vec4(vec3(maxDensity),1);
}